# MCP Tools Integration CI/CD Pipeline
name: MCP Tools Integration

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 9 * * *' # Daily at 9 AM for design sync
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Design System Sync Job
  design-sync:
    name: Design System Sync
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure git
        run: |
          git config --global user.name 'MCP Bot'
          git config --global user.email 'mcpbot@mcphub.dev'
      
      - name: Extract Figma Assets
        env:
          FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
          FIGMA_FILE_KEY: ${{ secrets.FIGMA_FILE_KEY }}
        run: |
          # Check if assets need update
          if [ -n "$FIGMA_FILE_KEY" ]; then
            echo "Extracting Figma assets..."
            ./scripts/mcp-tools-integration.sh extract-figma $FIGMA_FILE_KEY
            
            # Update design tokens
            ./scripts/mcp-tools-integration.sh design-tokens $FIGMA_FILE_KEY
            
            # Check for changes
            if git diff --quiet; then
              echo "No design changes detected"
            else
              echo "Design changes detected, creating PR"
              echo "DESIGN_CHANGES=true" >> $GITHUB_ENV
            fi
          else
            echo "No Figma file key configured"
          fi
      
      - name: Create Design Update PR
        if: env.DESIGN_CHANGES == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Update design assets and tokens from Figma'
          title: 'Design System Update - $(date +%Y-%m-%d)'
          body: |
            ## Design System Update
            
            This PR contains automated updates from the Figma design system:
            
            ### Changes
            - Updated design assets (icons, illustrations, logos)
            - Updated design tokens (colors, typography, spacing)
            - Generated component styles
            
            ### Review Checklist
            - [ ] Visual review of updated assets
            - [ ] Verify design token changes
            - [ ] Test component updates
            - [ ] Validate accessibility compliance
            
            ### Auto-generated by MCP Tools Integration
            - **Date**: $(date)
            - **Figma File**: ${{ secrets.FIGMA_FILE_KEY }}
            - **Workflow**: Design System Sync
          branch: design-system-update-${{ github.run_number }}
          delete-branch: true

  # Validation Job
  validate-setup:
    name: Validate MCP Tools Setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Validate MCP Tools Configuration
        run: |
          chmod +x scripts/validate-mcp-tools.sh
          ./scripts/validate-mcp-tools.sh
      
      - name: Check Claude Code Settings
        run: |
          if [ -f ".claude/settings.local.json" ]; then
            echo "Claude Code settings found"
            # Validate JSON syntax
            if command -v jq &> /dev/null; then
              jq empty .claude/settings.local.json
              echo "Claude Code settings are valid"
            fi
          else
            echo "Warning: Claude Code settings not found"
          fi
      
      - name: Validate Configuration Files
        run: |
          # Check required configuration files
          required_files=(
            "config/mcp-tools/figma-config.json"
            "config/mcp-tools/playwright-config.json"
            "config/mcp-tools/dev-environment.json"
            "config/mcp-tools/team-collaboration.json"
            "config/mcp-tools/ci-cd.json"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
              if command -v jq &> /dev/null; then
                jq empty "$file"
                echo "✅ $file is valid JSON"
              fi
            else
              echo "❌ $file missing"
              exit 1
            fi
          done

  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-setup
    
    strategy:
      matrix:
        environment: [development, staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Restore .NET dependencies
        run: dotnet restore Source/
      
      - name: Build solution
        run: dotnet build Source/ --no-restore --configuration Release
      
      - name: Run unit tests
        run: dotnet test Source/ --no-build --configuration Release --logger trx --results-directory TestResults/
      
      - name: Start services for E2E tests
        run: |
          # Start services in background
          cd Source
          dotnet run --project AppHost &
          
          # Wait for services to start
          sleep 30
          
          # Check if services are running
          curl -f http://localhost:5001/health || exit 1
          curl -f http://localhost:5002/health || exit 1
        
      - name: Run E2E Tests with Playwright MCP
        env:
          TEST_ENVIRONMENT: ${{ matrix.environment }}
        run: |
          # Run E2E tests using MCP tools integration
          ./scripts/mcp-tools-integration.sh run-tests e2e ${{ matrix.environment }}
        
      - name: Run Visual Regression Tests
        run: |
          # Run visual regression tests
          ./scripts/mcp-tools-integration.sh run-tests visual-regression ${{ matrix.environment }}
        
      - name: Run Accessibility Tests
        run: |
          # Run accessibility tests
          ./scripts/mcp-tools-integration.sh run-tests accessibility ${{ matrix.environment }}
        
      - name: Generate Test Report
        if: always()
        run: |
          # Generate comprehensive test report
          mkdir -p test-reports
          echo "# Test Report - ${{ matrix.environment }}" > test-reports/summary.md
          echo "**Environment**: ${{ matrix.environment }}" >> test-reports/summary.md
          echo "**Date**: $(date)" >> test-reports/summary.md
          echo "**Commit**: ${{ github.sha }}" >> test-reports/summary.md
          echo "" >> test-reports/summary.md
          
          # Add test results summary
          if [ -d "TestResults" ]; then
            echo "## Unit Test Results" >> test-reports/summary.md
            echo "Test results available in artifacts" >> test-reports/summary.md
          fi
          
          if [ -d "test-results" ]; then
            echo "## E2E Test Results" >> test-reports/summary.md
            echo "E2E test results available in artifacts" >> test-reports/summary.md
          fi
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.environment }}
          path: |
            TestResults/
            test-results/
            test-reports/
            assets/playwright-screenshots/
          retention-days: 30
      
      - name: Upload Test Report to Job Summary
        if: always()
        run: |
          if [ -f "test-reports/summary.md" ]; then
            cat test-reports/summary.md >> $GITHUB_STEP_SUMMARY
          fi

  # Performance Testing Job
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Start services
        run: |
          cd Source
          dotnet run --project AppHost &
          sleep 30
      
      - name: Run Performance Tests
        run: |
          # Run performance tests using Playwright MCP
          ./scripts/mcp-tools-integration.sh run-tests performance production
      
      - name: Generate Performance Report
        run: |
          mkdir -p performance-reports
          echo "# Performance Test Report" > performance-reports/summary.md
          echo "**Date**: $(date)" >> performance-reports/summary.md
          echo "**Commit**: ${{ github.sha }}" >> performance-reports/summary.md
          echo "" >> performance-reports/summary.md
          echo "Performance test results available in artifacts" >> performance-reports/summary.md
      
      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            performance-reports/
            assets/playwright-screenshots/
          retention-days: 30

  # Security Testing Job
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Start services
        run: |
          cd Source
          dotnet run --project AppHost &
          sleep 30
      
      - name: Run Security Tests
        run: |
          # Run security tests using Playwright MCP
          ./scripts/mcp-tools-integration.sh run-tests security production
      
      - name: Generate Security Report
        run: |
          mkdir -p security-reports
          echo "# Security Test Report" > security-reports/summary.md
          echo "**Date**: $(date)" >> security-reports/summary.md
          echo "**Commit**: ${{ github.sha }}" >> security-reports/summary.md
          echo "" >> security-reports/summary.md
          echo "Security test results available in artifacts" >> security-reports/summary.md
      
      - name: Upload Security Results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: |
            security-reports/
            assets/playwright-screenshots/
          retention-days: 30

  # Deployment Validation Job
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [build-and-test, performance-tests, security-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Validate Deployment Readiness
        run: |
          echo "# Deployment Validation Report" > deployment-report.md
          echo "**Date**: $(date)" >> deployment-report.md
          echo "**Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Validation Results" >> deployment-report.md
          echo "- ✅ Build successful" >> deployment-report.md
          echo "- ✅ Unit tests passed" >> deployment-report.md
          echo "- ✅ E2E tests passed" >> deployment-report.md
          echo "- ✅ Performance tests passed" >> deployment-report.md
          echo "- ✅ Security tests passed" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Deployment Status" >> deployment-report.md
          echo "Ready for deployment to staging environment" >> deployment-report.md
      
      - name: Upload Deployment Report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 30
      
      - name: Add Deployment Report to Summary
        run: |
          cat deployment-report.md >> $GITHUB_STEP_SUMMARY

  # Notification Job
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [design-sync, validate-setup, build-and-test, performance-tests, security-tests, deployment-validation]
    if: always()
    
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ MCP Tools Integration pipeline failed" >> $GITHUB_OUTPUT
          elif [ "${{ contains(needs.*.result, 'cancelled') }}" = "true" ]; then
            echo "status=cancelled" >> $GITHUB_OUTPUT
            echo "message=⏹️ MCP Tools Integration pipeline was cancelled" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ MCP Tools Integration pipeline completed successfully" >> $GITHUB_OUTPUT
          fi
      
      - name: Create summary
        run: |
          echo "# MCP Tools Integration Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Design Sync**: ${{ needs.design-sync.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate-setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Test**: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: ${{ needs.performance-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: ${{ needs.deployment-validation.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test results and reports available in job artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots and performance metrics included" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment validation report available" >> $GITHUB_STEP_SUMMARY