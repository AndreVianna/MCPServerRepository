name: Continuous Integration

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20'
  SOLUTION_PATH: 'Source/MCPHub.sln'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test .NET solution
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: mcphub_test
          POSTGRES_USER: mcphub_user
          POSTGRES_PASSWORD: mcphub_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200
      
      qdrant:
        image: qdrant/qdrant:v1.7.3
        env:
          QDRANT__SERVICE__HTTP_PORT: 6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 6333:6333
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Install .NET workloads
        run: |
          dotnet workload install aspire
          dotnet workload install wasm-tools
      
      - name: Install .NET tools
        run: |
          dotnet tool install -g dotnet-ef
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-format
      
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U mcphub_user -d mcphub_test; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i"
            sleep 2
          done
          
          echo "Waiting for Redis..."
          for i in {1..30}; do
            if redis-cli -h localhost -p 6379 ping; then
              echo "Redis is ready"
              break
            fi
            echo "Waiting for Redis... attempt $i"
            sleep 2
          done
          
          echo "Waiting for Elasticsearch..."
          for i in {1..30}; do
            if curl -f http://localhost:9200/_cluster/health; then
              echo "Elasticsearch is ready"
              break
            fi
            echo "Waiting for Elasticsearch... attempt $i"
            sleep 2
          done
          
          echo "Waiting for Qdrant..."
          for i in {1..30}; do
            if curl -f http://localhost:6333/health; then
              echo "Qdrant is ready"
              break
            fi
            echo "Waiting for Qdrant... attempt $i"
            sleep 2
          done
          
          echo "Waiting for RabbitMQ..."
          for i in {1..30}; do
            if curl -f http://localhost:15672/api/overview; then
              echo "RabbitMQ is ready"
              break
            fi
            echo "Waiting for RabbitMQ... attempt $i"
            sleep 2
          done
      
      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}
      
      - name: Check code formatting
        run: dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic
      
      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
      - name: Run unit tests
        run: |
          dotnet test ${{ env.SOLUTION_PATH }} \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            --logger trx \
            --logger "console;verbosity=detailed"
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=mcphub_test;Username=mcphub_user;Password=mcphub_test_password"
          ConnectionStrings__Redis: "localhost:6379"
          ConnectionStrings__Elasticsearch: "http://localhost:9200"
          ConnectionStrings__Qdrant: "http://localhost:6333"
          ConnectionStrings__RabbitMQ: "amqp://guest:guest@localhost:5672"
          ASPNETCORE_ENVIRONMENT: Testing
          DOTNET_ENVIRONMENT: Testing
      
      - name: Generate code coverage report
        run: |
          reportgenerator \
            -reports:"TestResults/*/coverage.cobertura.xml" \
            -targetdir:"TestResults/CoverageReport" \
            -reporttypes:"HtmlInline_AzurePipelines;Cobertura;JsonSummary"
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./TestResults/
          files: ./TestResults/CoverageReport/Cobertura.xml
          fail_ci_if_error: false
          verbose: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: TestResults/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            Source/*/bin/Release/
            Source/*/obj/Release/
            !Source/*/bin/Release/ref/
            !Source/*/obj/Release/ref/
          retention-days: 1

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Run security scan
        run: |
          dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: csharp
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # End-to-end testing with Playwright
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: mcphub_e2e
          POSTGRES_USER: mcphub_user
          POSTGRES_PASSWORD: mcphub_e2e_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Install .NET workloads
        run: |
          dotnet workload install aspire
          dotnet workload install wasm-tools
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: Source/
      
      - name: Start application
        run: |
          cd Source/AppHost
          dotnet run --configuration Release &
          sleep 30
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=mcphub_e2e;Username=mcphub_user;Password=mcphub_e2e_password"
          ConnectionStrings__Redis: "localhost:6379"
          ASPNETCORE_ENVIRONMENT: Testing
          DOTNET_ENVIRONMENT: Testing
      
      - name: Run E2E tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:5000
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [webapp, publicapi, commandlineapp, securityservice, searchservice]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Source/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment logic here
          # This could be Helm charts, kubectl, or other deployment tools
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test logic here
      
      - name: Notify deployment
        if: always()
        run: |
          echo "Deployment completed. Status: ${{ job.status }}"
          # Add notification logic here (Slack, Teams, etc.)

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add deployment logic here
          # This could be Helm charts, kubectl, or other deployment tools
      
      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check logic here
      
      - name: Notify deployment
        if: always()
        run: |
          echo "Production deployment completed. Status: ${{ job.status }}"
          # Add notification logic here (Slack, Teams, etc.)

  # Cleanup artifacts
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'build-artifacts' && artifact.created_at < new Date(Date.now() - 24 * 60 * 60 * 1000)) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }