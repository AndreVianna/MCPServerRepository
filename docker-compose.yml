version: '3.8'

services:
  # MCP Hub Web Application
  webapp:
    build:
      context: .
      dockerfile: Source/WebApp/Dockerfile
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000;https://+:5001
      - ASPNETCORE_Kestrel__Certificates__Default__Password=development
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=mcphub;Username=mcphub_user;Password=mcphub_password
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__Qdrant=http://qdrant:6333
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672
      - JWT__SecretKey=your-super-secret-jwt-key-here-change-in-production
      - JWT__Issuer=MCPHub
      - JWT__Audience=MCPHub
      - JWT__ExpirationMinutes=60
      - GitHub__ClientId=your-github-client-id
      - GitHub__ClientSecret=your-github-client-secret
      - OpenTelemetry__Endpoint=http://jaeger:4317
    volumes:
      - ~/.aspnet/https:/https:ro
      - ./Source/WebApp/wwwroot:/app/wwwroot
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - qdrant
      - rabbitmq
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Public API Service
  publicapi:
    build:
      context: .
      dockerfile: Source/PublicApi/Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - ASPNETCORE_Kestrel__Certificates__Default__Password=development
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=mcphub;Username=mcphub_user;Password=mcphub_password
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__Qdrant=http://qdrant:6333
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672
      - JWT__SecretKey=your-super-secret-jwt-key-here-change-in-production
      - JWT__Issuer=MCPHub
      - JWT__Audience=MCPHub
      - JWT__ExpirationMinutes=60
      - OpenTelemetry__Endpoint=http://jaeger:4317
    volumes:
      - ~/.aspnet/https:/https:ro
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - qdrant
      - rabbitmq
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Security Service
  securityservice:
    build:
      context: .
      dockerfile: Source/SecurityService/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8082
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=mcphub;Username=mcphub_user;Password=mcphub_password
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672
      - Security__ScanTimeout=300
      - Security__MaxConcurrentScans=5
      - Security__VirusTotalApiKey=your-virustotal-api-key
      - OpenTelemetry__Endpoint=http://jaeger:4317
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Search Service
  searchservice:
    build:
      context: .
      dockerfile: Source/SearchService/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8083
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=mcphub;Username=mcphub_user;Password=mcphub_password
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__Qdrant=http://qdrant:6333
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672
      - Search__IndexName=mcphub-packages
      - Search__MaxResults=100
      - Search__SemanticSearchEnabled=true
      - OpenTelemetry__Endpoint=http://jaeger:4317
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - qdrant
      - rabbitmq
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=mcphub
      - POSTGRES_USER=mcphub_user
      - POSTGRES_PASSWORD=mcphub_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./Scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcphub_user -d mcphub"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=mcphub-cluster
      - node.name=mcphub-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.3
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./Monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mcphub-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./Monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./Monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - mcphub-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:8.0
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@mcphub.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - mcphub-network
    depends_on:
      - postgres

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - mcphub-network
    depends_on:
      - redis

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Nginx/conf.d:/etc/nginx/conf.d:ro
      - ./Nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - mcphub-network
    depends_on:
      - webapp
      - publicapi
      - securityservice
      - searchservice
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  qdrant-data:
    driver: local
  rabbitmq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  pgadmin-data:
    driver: local

networks:
  mcphub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16